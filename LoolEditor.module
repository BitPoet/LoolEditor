<?php namespace ProcessWire;

require(__DIR__ . "/WOPI.php");
require(__DIR__ . "/Token.php");

/**
 * Edit office documents directly inside ProcessWire.
 *
 * Needs Collabora CODE installed and configured
 * (see README.md for details).
 *
 * This is a module for the free ProcessWire CMS (https://processwire.com)
 *
 * Module code by BitPoet
 * Licensed under MPL 2.0
 */

class LoolEditor extends WireData implements Module {
	
	protected $tokenManager;
	protected $wopi;
	protected $discoveryTable;
	
	public static function getModuleInfo() {
		return array(
			"title"			=>	"Endpoint for LibreOffice Online Editor",
			"summary"		=>	"Allow editing page files with LibreOffice Online / Collabora CODE. Will be installed when you install ProcessLoolEditor.",
			"version"		=>	"0.0.9",
			"author"		=>	"BitPoet",
			"autoload"		=>	true,
			"requires"		=>	"ProcessWire>=3.0",
		);
	}
	
	public function __construct() {
		$this->tokenManager = new LoolToken();
		$this->wopi = new LoolWopi();
		$this->addHookAfter("InputfieldFile::renderItem", $this, "addInputfieldFileEditLink");
		$this->addHookAfter("FieldtypeFile::getConfigAllowContext", $this, "getConfigAllowContext");
		$this->addHookAfter("FieldtypeFile::getConfigInputfields", $this, "getConfigInputfields");
	}
	
	
	/**
	 * Add the file edit link to the image input field if the file type
	 * is supported by LibreOffice Online.
	 *
	 * Executed after InputfieldFile::renderItem
	 */
	public function addInputfieldFileEditLink(HookEvent $event) {
		$moduleCSS = $this->config->urls->{$this->className()} . $this->className() . ".css";
		$this->config->styles->add($moduleCSS . "?v=" . filemtime($this->config->paths->{$this->className()} . $this->className() . ".css"));
		$moduleJS = $this->config->urls->{$this->className()} . $this->className() . ".js";
		$this->config->scripts->add($moduleJS . "?v=" . filemtime($this->config->paths->{$this->className()} . $this->className() . ".js"));		

		$inp = $event->object;
		$pagefile = $event->arguments(0);
		$id = $event->arguments(1);
		$n = $event->arguments(2);
		
		$ownerPage = $pagefile->get("page");
		$field = $pagefile->get("field");
		$fieldContext = $ownerPage->template->fieldgroup->getField($field->name, true);
		
		// Only show editor when enabled for this field
		if(! $fieldContext->enableLool) return;
		
		if(! $this->hasFileMapping(strtolower(preg_replace('/^.*\./', '', $pagefile->name)))) return;
		
		$editPage = $this->pages->get($this->config->adminRootPageID)->child("name=lool, include=hidden");
		$editUrl = $editPage->url . "?id=" . $ownerPage->id . "&field=" . $inp->name . "&filename=" . $pagefile->name . "&modal=1";
		
		$html = "<a class='InputfieldFileLoolEditLink pwLoolEditorLink' href='$editUrl' title='" . sprintf(_("Edit file %s%s"), $ownerPage->url, $pagefile->name) . "'> " .
				"<span class='fa fa-pencil-square-o' title='" . $this->_("Edit file in Collabora CODE Editor") . "'> </span>" .
				"</a>\n";
		
		$return = $event->return;
		$return = preg_replace('~(InputfieldFileStats.*</span> )~', '$1' . $html, $return);
		
		$event->return = $return;
	}
	
	/**
	 * Check if a urlsrc for this file extension is defined in discovery.xml,
	 * meaning that the file is supported by LibreOffce Online
	 */
	private function hasFileMapping($ext) {
		if(strpos($ext, ".") === 0) $ext = rtrim($ext, ".");
		
		try {
			$this->buildDiscoveryTable();
		} catch(Exception $e) {
			// Do nothing
		}
		
		if(is_array($this->discoveryTable) && array_key_exists($ext, $this->discoveryTable)) return true;
		
		return false;
	}
	
	/**
	 * This function handles all the communication with the CODE server
	 */
	public function handleRequest() {
		$request = $this->wopi->parseRequest();
		
		if(isset($request["error"])) {
			$this->log->error("LoolEditor::handleRequest error");
			header("HTTP/1.1 400 " . $request["error"]);
			exit;
		}
		
		if($request["action"] == "NotImplemented") {
			header("HTTP/1.1 501 Not Implmemented");
			exit;
		}
		
		switch($request["action"]) {
			case "GetFile":
				$this->getFile($request);
				break;
			case "PutFile":
				$this->putFile($request);
				break;
			case "CheckFileInfo":
				$this->checkFileInfo($request);
				break;
			case "Lock":
				$this->tryLock($request);
				break;
			case "Unlock":
				$this->unLock($request);
				break;
			case "UnlockAndRelock":
				$this->unLockAndRelock($request);
				break;
			case "RefreshLock":
				$this->tryRefreshLock($request);
				break;
		}
	}
	
	
	/**
	 * Helper function that checks access permissions and returns
	 * the lock information in an associative array.
	 */
	private function checkLock($request) {
		$fid = $request["fileid"];
		
		$filedata = $this->getFileDataIfAuthorized($fid);

		list($page, $field, $user) = $this->getFileAssociatedObjects($filedata);

		if(! $field->viewable($page, $user)) $this->jsonResopnse(array(), 404, "Not Found");
		
		$editable = $field->editable($page, $user);
		
		if(! $editable) {
			$this->jsonResponse(array(), 404, "Not allowed to edit file");
		}

		$lock = $this->wopi->getLock($fid);

		return $lock;		
	}
	
	
	/**
	 * Tries to lock the given file id
	 */
	private function tryLock($request) {
		$fid = $request["fileid"];
		
		$lock = $this->checkLock($fid);
		
		if($lock) {
			if($lock["lock_user_id"] == $user->id && $lock["lock"] == $request["lock"]) {
				$this->wopi->updateLock($fid);
			} else {
				header("X-WOPI-Lock", "{$lock['id']}");
				$this->jsonResponse(array(), 409, "Conflict");
			}
		} else {
			$this->wopi->lock($fid, $user);
		}
		
		$this->jsonResponse(array());
	}
	
	
	/**
	 * Unlocks the given file id, i.e. deletes the lock entry in the db.
	 *
	 * if $quitAfterSuccess is set to false, the function silently returns
	 * on success. This is needed to allow calling it from unLockAndRelock.
	 */
	private function unLock($request, $quitAfterSuccess = true) {
		$fid = $request["fileid"];
		
		$lock = $this->checkLock($fid);
		
		if(! $lock || $lock["lock_user_id"] != $user->id || $lock["lock"] != $request["lock"]) {
			header("X-WOPI-Lock", "{$lock['id']}");
			$this->jsonResponse(array(), 409, "Conflict");
		}
		
		$this->wopi->unLock($fid);
		
		if($quitAfterSuccess) $this->jsonResponse(array());
	}
	
	/**
	 * Removes an old lock (if present) and returns a new one.
	 */
	private function unLockAndRelock($request) {
		$fid = $request["fileid"];

		$this->unLock($request, false);
		$this->tryLock($request);
	}
	
	private function tryRefreshLock($request) {
		$fid = $request["fileid"];
		
		$lock = $this->checkLock($fid);
		
		if(! $lock || $lock["lock_user_id"] != $user->id || $lock["lock"] != $request["lock"]) {
			header("X-WOPI-Lock", "{$lock['id']}");
			$this->jsonResponse(array(), 409, "Conflict");
		}
		
		$this->wopi->updateLock($fid);
		
		$this->jsonResponse(array());
	}
	
	/**
	 * Return stored data (token, user, etc.) for given fileid
	 * if the token given as GET parameter matches, otherwise
	 * output an error and terminate the script.
	 */
	private function getFileDataIfAuthorized($fileid) {
		$token = $this->input->get("access_token");
		
		if(! $token) $this->jsonResponse(array(), 401, "Unauthorized");

		$filedata = $this->tokenManager->getFileDataForToken($token);

		if($filedata["fileid"] != $fileid) $this->jsonResponse(array(), 401, "Unauthorized");

		return $filedata;
	}
	
	/**
	 * Retrieve the associated objects (page, field, user)
	 * for the ids/names stored in the db.
	 */
	private function getFileAssociatedObjects($filedata) {
		$page = $this->pages->get($filedata["pages_id"]);
		$field = $this->fields->get($filedata["fieldname"]);
		$user = $this->users->get($filedata["username"]);

		return array($page, $field, $user);		
	}
	
	
	/**
	 * Retrieve the file after applying PW's access checks
	 * and output it to the WOPI client.
	 */
	private function getFile($request) {
		$fid = $request["fileid"];
		
		$filedata = $this->getFileDataIfAuthorized($fid);

		list($page, $field, $user) = $this->getFileAssociatedObjects($filedata);

		if(! $field->viewable($page, $user)) $this->jsonResopnse(array(), 404, "Not Found");
		
		$editable = $field->editable($page, $user);
		
		$path = $page->getUnformatted($filedata["fieldname"])->path();
		$filename = $filedata["filename"];
		
		header("Content-Type: application/octet-stream");
		header("Content-Disposition: attachment; filename=$filename");
		readfile($path . $filename);
		exit;
	}
	
	
	/**
	 * Store the file POSTed to us if permission checks
	 * allow it. Overwrites the original file in
	 * site/assets/files/$pageid/.
	 */
	private function putFile($request) {
		$fid = $request["fileid"];
		
		$filedata = $this->getFileDataIfAuthorized($fid);

		list($page, $field, $user) = $this->getFileAssociatedObjects($filedata);

		if(! $field->viewable($page, $user)) $this->jsonResopnse(array(), 404, "Not Found");
		
		$editable = $field->editable($page, $user);
		
		if(! $editable) {
			$this->jsonResponse(array(), 404, "Not allowed to edit file");
		}
		
		$path = $page->getUnformatted($filedata["fieldname"])->path();
		$filename = $filedata["filename"];

		// Read file data from raw POST body and overwrite the original file with it		
		$file = fopen($path . $filename, "w");
		$inp  = fopen("php://input", "r");
		while($block = fread($inp, 8192)) {
			fputs($file, $block);
		}
		fclose($inp);
		fclose($file);
		
		$this->jsonResponse(array());
	}
	
	
	/**
	 * Retrieve basic file information after performing
	 * access checks and return the necessary information
	 * to the WOPI client.
	 *
	 * This method also lets the WOPI client know whether
	 * the file can be edited.
	 */
	private function checkFileInfo($request) {
		$fid = $request["fileid"];
		
		$filedata = $this->getFileDataIfAuthorized($fid);

		list($page, $field, $user) = $this->getFileAssociatedObjects($filedata);

		if(! $field->viewable($page, $user)) $this->jsonResopnse(array(), 404, "Not Found");
		
		$editable = $field->editable($page, $user);
		
		$path = $page->getUnformatted($filedata["fieldname"])->path();
		$filename = $filedata["filename"];
		
		$ret = array(
			"BaseFileName" => $filename,
			"OwnerId" => $page->createdUser->name,
			"Size" => filesize($path . $filename),
			"UserId" => $user->name,
			"Version" => "v" . filemtime($path. $filename),
			"ReadOnly" => !$editable,
			"UserCanWrite" => $editable,
			"UserCanNotWriteRelative" => true,
			"SupportsLocks" => true,
			"UserFriendlyName" => $user->name,
			"UserExtraInfo" => array(),
			"LastModifiedTime" => date("c", filemtime($path . $filename)),
			"CloseButtonClosesWindow" => true
		);
		
		$this->jsonResponse($ret);
	}
	
	
	/**
	 * Retrieve discovery.xml from the WOPI client or load the cached
	 * resource in site/assets/cache/discovery.json.
	 *
	 * This file defines which file extensions / mime types can be
	 * displayed and edited.
	 */
	private function getDiscoveryXml() {
		$discovery = $this->config->paths->cache . "discovery.json";
		
		if(! file_exists($discovery) || filemtime($discovery) < time() - 86400) {
			// Fetch discovery.xml file and renew every 24 hours
			$http = new WireHttp();
			$url = $this->pages->get('/')->httpUrl . "hosting/discovery";
			$xml = $http->get($url);
			
			if($xml === false) {
				throw new WireException("Unable to fetch wopi discovery file from $url");
			}
			
			$data = json_decode(json_encode(simplexml_load_string($xml)), true);
			
			$file = fopen($discovery, "w");
			fputs($file, json_encode($data, \JSON_PRETTY_PRINT));
			fclose($file);
		} else {
			$encoded = file_get_contents($discovery);
			
			$data = json_decode($encoded, true);
		}
		
		return $data;
	}
	
	
	/**
	 * Transform discovery data from the WOPI client into a
	 * more easily usable key->value table in a property of
	 * this class
	 */
	private function buildDiscoveryTable() {
		$data = $this->getDiscoveryXml();
		$urlMapping = array();
		
		foreach($data["net-zone"]["app"] as $item) {
			$urlMapping[$item["action"]["@attributes"]["ext"]] = $item["action"]["@attributes"]["urlsrc"];
		}
		
		$this->discoveryTable = $urlMapping;
	}
	
	
	/**
	 * Retrieve the urlsrc for a given extension from our lookup table
	 */
	public function getUrlSrc($extension) {
		if(strpos($extension, ".") == 0) $extension = ltrim($extension, ".");
		
		$this->buildDiscoveryTable();
		
		return isset($this->discoveryTable[strtolower($extension)]) ? $this->discoveryTable[strtolower($extension)] : false;
	}
	
	
	/**
	 * Render the editor iframe and the form with the necessary information that
	 * will be posted on page load by ProcessLoolEditor.js
	 */
	public function ___renderEditor($page, $field, $filename, $user) {
		
		$token = $this->tokenManager->getFileToken($page->id, $field->name, $filename);
		
		if($token) {
			$fileinfo = $this->tokenManager->getFileDataForToken($token);
			
			//if($fileinfo["username"] != $user->name)
			//	return $this->_("File is already locked by user " . $fileinfo["username"]);
		} else {
			$token = $this->tokenManager->createToken($page->id, $field->name, $filename, $user->name);
		}
		
		$wopiPage = $this->pages->get("/wopi/");
		$filedata = $this->tokenManager->getFileDataForToken($token);
		
		$extension = preg_replace('/^.*\./', '', $filename);
		$urlsrc = $this->getUrlSrc($extension);
		
		$WOPISrc = $wopiPage->httpUrl . "files/" . $filedata["fileid"];
		
		$viewerUrl = $urlsrc .
					"WOPISrc=" . $WOPISrc .
					"&closebutton=1" .
					"&title=" . urlencode($filename) .
					"&lang=de" .
					"&revisionhistory=1";
		
		$out =	'<iframe id="loleafletframe_viewer" name= "loleafletframe_viewer" style="width:100%;left:0;height:auto;position:absolute;"></iframe>' . "\n" .
				"<form id='loleafletform_viewer' name='loleafletform_viewer' target='loleafletframe_viewer' action='$viewerUrl' method='POST'>\n" .
				'<input name="access_token" value="' . $token . '" type="hidden"/>' . "\n" .
				'</form>' . "\n";
		
		return $out;
	}
	
	
	/**
	 * Outputs the given body with optional HTTP status code and text
	 * to the client and exists.
	 */
	private function jsonResponse($data, $code = 200, $statusText = "OK") {
		header("HTTP/1.1 $code $statusText");
		header("Content-Type: application/json");
		echo json_encode($data);
		exit;
	}
	
	
	public function install() {
		$this->tokenManager->createTable();
		$this->wopi->createLocksTable();
	}	
	
	public function uninstall() {
		$this->tokenManager->removeTable();
		$this->wopi->removeLocksTable();
	}
	
	public function update($from, $to) {
		if(version_compare($from, "0.0.7", "<")) {
			$this->wopi->addLockIdColumn();
		}
	}
	
	/**
	 * Add LibreOffice Online editing options to all file input types
	 *
	 */
	public function getConfigInputfields(HookEvent $event) {

		$inputfields = $event->return;
		$field = $event->arguments(0);
		$fieldCls = $field->type->className();
		
		// Only enable LoolEditor on plain file fields, not image fields or others.
		// See ___getCompatibleFields for a place to change that behaviour.
		if($fieldCls !== "FieldtypeFile" && ! in_array($fieldCls, $this->getCompatibleFields())) return;
		
		$f = $this->modules->get("InputfieldCheckbox");
		$f->label = $this->_("Enable LibreOffice Online Editing");
		$f->attr('name', 'enableLool');
		if($field->enableLool) $f->attr('checked', 'checked');
		$f->description = $this->_("If checked, supported file types can be edited with LibreOffice Online.");
		
		$inputfields->append($f);
		
		$event->return = $inputfields;
	}

	/**
	 * Convenience hook. Normally, LoolEditor can only be activated for
	 * fields of type FieldtypeFile so that derived fields like FieldtypeImage
	 * are excluded by default.
	 *
	 * If you have Fieldtypes that use InputfieldFile or a derived type where
	 * inujecting the LoolEditor edit link works too, you can simply hook here
	 * and add the class name (FieldtypeXXXWhatever) to the returned array.
	 */
	public function ___getCompatibleFields() {
		return array();
	}

	/**
	 * Allow configuring LibreOffice Online editing also in template context for fields
	 */
	public function getConfigAllowContext(HookEvent $event) {
		$event->return = array_merge($event->return, ["enableLool"]);
	}
	
}
